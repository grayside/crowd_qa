<?php
// $Id$

/**
 * @file
 *   Module for Crowdsourced Question & Answer
 */

include_once 'crowd_qa.features.inc';

/**
 * Implementation of hook_menu().
 */
function crowd_qa_menu() {
  $items = array();
  $items['admin/settings/crowd_qa'] = array(
    'title' => 'Crowd Q&A',
    'description' => 'Administrate Crowd Q&A',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crowd_qa_admin_settings'),
    'access arguments' => array('administer nodes'),
  );
  return $items;
}

/**
 * Implementation of hook_init().
 */
function crowd_qa_init() {
  // Redirect answer nodes to their question.
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == NULL) {
    $node = node_load(arg(1));
    if ($node->type == 'crowd_qa_answer') {
      drupal_goto('node/'. $node->field_crowd_qa_question[0]['nid'], NULL, 'answer' . $node->nid);
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function crowd_qa_nodeapi(&$node, $op, $a3, $a4) {
  switch ($op) {
    case 'presave':
      if ($node->type == 'crowd_qa_answer') {
        $question = node_load($node->field_crowd_qa_question[0]['nid']);
        $node->title = 'Answer to "' . $question->title . '"';
      }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function crowd_qa_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'crowd_qa_answer_node_form') {
    // Hide the answer title, this is hard-coded in hook_nodeapi().
    unset($form['title']);

    $form['preamble'] = array(
      '#value' => '<div class="info">' . t('Please answer properly or not at all.') . '</div>',
      '#weight' => -20,
    );

    // Do not show the nodereference field if it is already set.
    $form['#after_build'][] = 'crowd_qa_form_answer_node_form_after_build';
  }
  elseif ($form_id == 'crowd_qa_question_node_form') {
    $form['preamble'] = array(
      '#value' => '<div class="info">' . t('Please ask a detailed, well-researched question to get good answers quickly.') . '</div>',
      '#weight' => -20,
    );
  }
}

/**
 * Form crowd_qa_answer_node_form after build.
 */
function crowd_qa_form_answer_node_form_after_build($form, &$form_state) {
  if (isset($form['field_crowd_qa_question'][0]['#default_value']['nid'])) {
    // Hide the question reference widget for already set questions.
    // Hidden is kind of a cheat, I would rather inject this in a validation callback.
//    $form['field_crowd_qa_question'][0]['#type'] = 'hidden';
    $form['field_crowd_qa_question'][0]['#value'] = $form['field_crowd_qa_question'][0]['#default_value']['nid'];
    $form['field_crowd_qa_question'][0]['#parents'] = array('field_crowd_qa_question', 0, 'nid');

    $question = crowd_qa_prepopulate_node_load($form['field_crowd_qa_question'][0]['#value']['nid']);
    $form['question'] = array(
      '#value' => '<h2>' . t('Question: ') . l($question->title, 'node/' . $question->nid) . '</h2>',
      '#weight' => -19,
    );
  }
  else {
    $form['question'] = array(
      '#value' => '<h2>' . t('Please select the question you will be answering.') . '</h2>',
      '#weight' => -19,
    );
  }
  return $form;
}

/**
 * Implementation of hook_preprocess_node_form().
 * Provides Atrium-integration for Crowd QA
 */
function crowd_qa_preprocess_node_form(&$vars) {
  if (module_exists('atrium') && !empty($vars['form']['field_crowd_qa_question'])) {
    $vars['sidebar']['field_crowd_qa_question'] = $vars['form']['field_crowd_qa_question'];
    unset($vars['form']['field_crowd_qa_question']);
  }
}

/**
 * Load the node from the prepopulate string [nid: #].
 */
function crowd_qa_prepopulate_node_load($value) {
  $nid = substr($value, 6, -1);
  if (is_numeric($nid)) {
    return node_load($nid);
  }
  return NULL;
}


/**
 * Implementation of hook_system_info_alter().
 * Provides Atrium-integration for Crowd QA
 */
function crowd_qa_system_info_alter(&$info, $row) {
  if (module_exists('atrium') && $row->name == 'crowd_qa') {
    if (empty($info['spaces']['types']) || !in_array('og', $info['spaces']['types'])) {
      $info['spaces']['types'][] = 'og';
    }
  }
}

/**
 * Page callback for Crowd Q&A settings.
 */
function crowd_qa_admin_settings() {
  $form = array();

  // Duplicate basic comment settings for Question & Answer nodes.
  $form['comment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Comment settings'),
    '#collapsible' => TRUE,
    '#access' => user_access('administer comments'),
  );
  $comment = array(
    '#type' => 'radios',
    '#title' => t('Default comment setting'),
    '#options' => array(t('Disabled'), t('Read only'), t('Read/Write')),
    '#description' => t('Users with the <em>administer comments</em> permission will be able to override this setting.'),
  );
  $form['comment']['comment_crowd_qa_question'] = $comment;
  $form['comment']['comment_crowd_qa_question']['#default_value'] = variable_get('comment_crowd_qa_question', COMMENT_NODE_READ_WRITE);
  $form['comment']['comment_crowd_qa_answer'] = $comment;
  $form['comment']['comment_crowd_qa_answer']['#default_value'] = variable_get('comment_crowd_qa_answer', COMMENT_NODE_READ_WRITE);

  // Duplicate Voting Karma so Crowd Q&A can easily tailor the reputation math.
  $form['votingapi'] = array(
    '#type' => 'fieldset',
    '#title' => t('Voting API settings'),
    '#collapsible' => TRUE,
    '#access' => user_access('administer voting api'),
  );

  $form['votingapi']['userpoints_votingapi_vote_karma_positive'] = array(
    '#type' => 'textfield',
    '#title' => t('!Points for author receiving positive votes', userpoints_translation()),
    '#default_value' => variable_get('userpoints_votingapi_vote_karma_positive', 1),
    '#size' => 5,
    '#maxlength' => 5,
  );

  $form['votingapi']['userpoints_votingapi_vote_karma_negative'] = array(
    '#type' => 'textfield',
    '#title' => t('!Points for author receiving negative votes', userpoints_translation()),
    '#default_value' => variable_get('userpoints_votingapi_vote_karma_negative', -1),
    '#size' => 5,
    '#maxlength' => 5,
  );

  // Tweak the display widget amongst the vote_up_down options.
  $form['vud_node_widget'] = array(
    '#title' => t('Voting Widget selection'),
    '#description' => t('Select the voting widget theme that will be displayed.'),
    '#type' => 'radios',
    '#default_value' => variable_get('vud_node_widget', 'updown'),
    '#options' => vud_widget_get_names(),
    '#access' => user_access('administer vote up/down'),
  );

  return system_settings_form($form);
}